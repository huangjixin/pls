<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<Configuration status="WARN" monitorInterval="30">
    <Properties>
        <!-- 定义日志文件的存储地址 -->
        <Property name="LOG_HOME">log</Property>
    </Properties>
    <Appenders>
        <!-- 输出控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%-5p] - [%l] - %msg%xEx%n"/>
        </Console>

        <!-- Info级别日志，生成日志文件 -->
        <!-- 存储在基于当前年月份的目录中，并且将使用gzip压缩每个存档，并且每小时滚动一次，文件大小限制为2048KB。 -->
        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/info.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="INFO"/>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %p - [%l] - %m%n"/>
            <Policies>
                <!-- 时间滚动策略，默认1hour -->
                <TimeBasedTriggeringPolicy/>
                <!-- 文件大小 -->
                <SizeBasedTriggeringPolicy size="2048KB"/>
            </Policies>
        </RollingFile>

        <!-- Warn级别日志，生成日志文件 -->
        <!-- 存储在基于当前年月份的目录中，并且将使用gzip压缩每个存档，并且每小时滚动一次，文件大小限制为2048KB。 -->
        <RollingFile name="RollingFileWarn" fileName="${LOG_HOME}/warn.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="WARN"/>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %p - [%l] - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="2048KB"/>
            </Policies>
        </RollingFile>

        <!-- Error级别日志，生成日志文件 -->
        <!-- 存储在基于当前年月份的目录中，并且将使用gzip压缩每个存档，并且每小时滚动一次，文件大小限制为2048KB。 -->
        <RollingFile name="RollingFileError" fileName="${LOG_HOME}/error.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz">
            <ThresholdFilter level="ERROR"/>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %p - [%l] - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="2048KB"/>
            </Policies>
        </RollingFile>

        <!-- scheduled check log -->
        <!-- 存储在基于当前年月份的目录中，并且将使用gzip压缩每个存档，并且每小时滚动一次，文件大小限制为2048KB。 -->
        <RollingFile name="ScheduledCheckLoggerRollingFile" fileName="${LOG_HOME}/scheduled_check.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/scheduled_check-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="INFO"/>
            </Filters>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%p] - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="2048KB"/>
            </Policies>
        </RollingFile>

        <!-- http invoke log -->
        <!-- 存储在基于当前年月份的目录中，并且将使用gzip压缩每个存档，并且每小时滚动一次，文件大小限制为2048KB。 -->
        <RollingFile name="HttpInvokeLoggerRollingFile" fileName="${LOG_HOME}/http_invoke.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/http_invoke-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="INFO"/>
            </Filters>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%p] - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="2048KB"/>
            </Policies>
        </RollingFile>

        <!-- ding open sdk log -->
        <!-- 存储在基于当前年月份的目录中，并且将使用gzip压缩每个存档，并且每小时滚动一次，文件大小限制为2048KB。 -->
        <RollingFile name="DingOpenClientSdkLoggerRollingFile" fileName="${LOG_HOME}/ding_open_client_sdk.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/ding_open_client_sdk-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="INFO"/>
            </Filters>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%p] - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="2048KB"/>
            </Policies>
        </RollingFile>

        <!-- mybatis log -->
        <!-- mybatis中SQL的日志级别为DEBUG，SQL执行结果的日志级别为TRACE -->
        <!-- 存储在基于当前年月份的目录中，并且将使用gzip压缩每个存档，并且每小时滚动一次，文件大小限制为2048KB。 -->
        <!-- 在每次Rolling时，将删除与“*/mybatis-*.log.gz”匹配且30天或更早的文件，但保留最新的100 MB或最新的10个文件，以先到者为准。 -->
        <RollingFile name="MyBatisLoggerRollingFile" fileName="${LOG_HOME}/mybatis.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/mybatis-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="DEBUG"/>
            </Filters>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%p] - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="2048KB"/>
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <IfFileName glob="*/mybatis-*.log.gz">
                        <IfLastModified age="30d">
                            <IfAny>
                                <IfAccumulatedFileSize exceeds="100 MB"/>
                                <IfAccumulatedFileCount exceeds="10"/>
                            </IfAny>
                        </IfLastModified>
                    </IfFileName>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
    </Appenders>
    <Loggers>
        <!-- Iclock考勤任务的日志，生成文件 -->
        <logger name="SCHEDULED_CHECK_LOGGER" level="INFO" additivity="false">
            <AppenderRef ref="ScheduledCheckLoggerRollingFile"/>
        </logger>
        <!-- HTTP_INVOKE的日志，生成文件-->
        <logger name="HTTP_INVOKE_LOGGER" level="INFO" additivity="false">
            <AppenderRef ref="HttpInvokeLoggerRollingFile"/>
        </logger>
        <!-- 钉钉SDK的日志，生成文件 -->
        <logger name="DING_OPEN_CLIENT_SDK_LOGGER" level="WARN" additivity="false">
            <AppenderRef ref="DingOpenClientSdkLoggerRollingFile"/>
        </logger>
        <!-- MyBatis SQL的日志，生成文件 -->
        <logger name="MAPPER" level="TRACE" additivity="false">
            <AppenderRef ref="MyBatisLoggerRollingFile"/>
        </logger>
        <!-- 日志输出级别 -->
        <Root level="TRACE">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="RollingFileInfo"/>
            <AppenderRef ref="RollingFileWarn"/>
            <AppenderRef ref="RollingFileError"/>
        </Root>
    </Loggers>
</Configuration>