---
apiVersion: apps/v1beta2
kind: Deployment             # 资源类型（Pod、Deployment、Job、Ingress、Service等）
metadata:                    # 一个Pod封装一个应用容器（也可以有多个容器），存储资源、一个独立的网络IP以及管理控制容器运行方式的策略选项。
  name: pls-system                # Deployment 名，全局唯一
  namespace: dev
spec:                        # spec 包括一些容器、存储、volume和其他参数，如重启策略
  selector:                  # 选择器
    matchLabels:             # 匹配标签,必须与下面的template.metadata.labels相对应,与service的selector相对于
      app: pls-system
  replicas: 1                # 副本数量
  strategy:                  # 策略
    rollingUpdate:           # 若replicas为3,则整个升级,pod个数在1-3个之间
      maxSurge: 1            # 滚动升级时会先启动1个pod
      maxUnavailable: 1      # 滚动升级时允许的最大Unavailable的pod个数
    type: RollingUpdate
  template:                  # 以此为模版创建pod实例
    metadata:
      labels:
        app: pls-system           # pod的标签，与容器名类似，可与service关联
    spec:                    # spec 包括一些容器、存储、volume和其他参数，如重启策略
      containers:
        - name: pls-system                   # 容器名
          image: register.myharbor.com/pls_dev/pls_system:${Tag}                        # 使用的镜像
          imagePullPolicy: IfNotPresent # 镜像拉取策略  Always / Never / IfNotPresent ，默认为IfNotPresent，只有镜像不存在时，才会进行镜像拉取，但latest标签的镜像默认为Always
          resources:                    # 容器资源限制
            limits:
              cpu: "2.0"
              memory: "2000Mi"
          ports:
            - containerPort: 8999       # pod（容器）端口
      restartPolicy: Always        # 重启策略：Always / Never / OnFailure
      imagePullSecrets:
        - name: harbor-secret
---
apiVersion: v1
kind: Service              # 资源类型（Pod、Deployment、Job、Ingress、Service等）
metadata:                  # 一个Pod封装一个应用容器（也可以有多个容器），存储资源、一个独立的网络IP以及管理控制容器运行方式的策略选项。
  name: pls-system              # service 名，全局唯一
  namespace: dev
  labels:                  # labels 可以附加到任何对象上，如Pod、Service等，并且可以定义多个
    app: pls-system
spec:                      # spec 包括一些容器、存储、volume和其他参数，如重启策略
  selector:                          # pod筛选
    app: pls-system           # 与deployment中的spec.template.metadata.labels相对应
  type: NodePort           # 服务类型，ClusterIP：默认服务类型，通过集群的内部IP暴露服务，服务只能够在集群内部可以访问；NodePort：通过每个结点上的IP和端口(NodePort)暴露服务；LoadBalancer：通过云提供商的负载均衡器，向外暴露服务；ExternalName：通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容（例如， foo.bar.example.com）。
  #clusterIP: 100.100.1.3  # 此 IP:port（ports.port) 用于集群中访问pod（容器）服务,注意apiserver子网范围
  ports:
    - name: pls-system-8999    # 端口名称
      protocol: TCP       # 端口协议(TCP/UDP)，默认为TCP
      port: 8999          # 监听的端口号
      targetPort: 8999    # Pod端口号，与容器端口相似
      nodePort: 8999      # 映射物理机的端口号